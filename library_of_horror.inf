!% -~S

! Library of Horror - a sample game which uses PunyInform

Constant FLAG_COUNT 8;
Constant F_SQUIRREL_ESCAPED 0;
Constant F_PARROT_FED 1;
Constant F_BOUGHT_TICKETS 2;

Include "puny.h";

Class Book
	with
		description [;
			print "Self is ", self, "^";
			if(self provides hello) {
				print (The) self, " has a Hello value of ", self.hello, ". ^";
			}
			rfalse;
		],
		hello 0,
		party [a b c;
			print "Self is ", self, "^";
			print "a is ", a, "^";
!			print "b is ", b, "^";
!			print "c is ", c, "^";
		];


Object CarPark "Car Park"
	with
		short_name [; print "In front of the library!"; rtrue; ],
		description "You are in a cark park in front of the library. You can enter to the north.",
		n_to Library,
! 		exits [;
! 			N_TO: return Library;
! 		],
		cant_go "Without a car the only viable exit is to the north.",
	has light;

Object Library "The Library"
	with
		short_name [; print "A huge library!"; rtrue; ],
		description "You are in an old and deserted library. There is an exit leading south.",
		s_to CarPark,
	has light;

Object -> SmallBox "box"
	with
		name 'box',
		description [;
			if(GetVisibilityCeiling(player) == self)
				"The box looked pretty big from the outside, but you feel really confined in here.";
			else
				"It's a large box. You could probably fit several people in there.";
		],
	has container openable enterable;

Book -> -> RedBook "red book"
	with
		name 'red' 'book',
		initial "There is a red book lying on the floor here.",
		description "The book is old and worn.",
		before [;
 			Take:
 				if(player in SmallBox) {
 					"It's too hard to pick it up while inside the box.";	
 				}
				if(BlueBook in player) {
					print "The blue book does not want to be near the red book and jumps out of your grasp and lands on the floor.^^";
					move BlueBook to location;
				}


		];

Object -> BlueBook "blue book" class Book
	with
		name 'book' 'blue',
		initial [;
			print "Self is ", self, ". ";
			if(BlueBook provides hello && BlueBook.hello > 10) {
				print "BlueBook.Hello is ", BlueBook.hello, ". ";
			}
			print "A ";
			PrintShortName(self);
			" is standing on a shelf. Looking at ", (the) self, " makes you dizzy.";
		],
		before [;
			Take: 
				if(RedBook in player) {
					print "The red book does not want to be near the blue book and jumps out of your grasp and lands on the floor.^^";
					move RedBook to location;
				}
		],
!		description "The book looks new and shiny.",
		bobby 7,
		hello 13,
		pants 21;

Object -> John "John"
	with
		name 'john',
		description "The book is old and worn.",
		react_before [;
			Take:
				if(noun == GreenBook && IndirectlyContains(parent(John), GreenBook) ) {
					"", (The) John, " says, ~Oh no! That's mine!~^";
				}
		],
	has proper;


Book -> GreenBook "green book"
	with
		name 'book' 'green',
		description "The book is nice and tidy.",
		;

[Initialise;
!	location = Library;
	PlayerTo(SmallBox);
	print "Parrot fed = ", FlagIsSet(F_PARROT_FED),"^";
	SetFlag(F_PARROT_FED);
	print "Have set. Parrot fed = ", FlagIsSet(F_PARROT_FED),"^";
	ClearFlag(F_PARROT_FED);
	print "Have cleared. Parrot fed = ", FlagIsSet(F_PARROT_FED),"^";
	print "Parrot fed != ", FlagIsClear(F_PARROT_FED),"^";

	BlueBook.description();
!	print "BlueBook.party is ", BlueBook.party, "^";
	BlueBook.party(5);
	print "^^And so the story begins...^^";
];

